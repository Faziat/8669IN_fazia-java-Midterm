***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer:A programming language is a system of notation used by programmers to write computer program. Programming languages have their own syntax, rules, and structure, and once a programmer learns them,
they write the source code in an IDE.The code is then often compiled into machine language that can be understood by the computer.

What is a JDK composed of? Define each component?
Answer: The JDK is composed of the following components:
        -JRE (Java Runtime Environment): The JRE is a subsystem of the JDK that provides runtime facilities like JVM (Java Virtual Machine), classes, executable files like .jar file, etc.

        -JVM (Java Virtual Machine): The JVM is an abstract machine that is used to check the intermediate code known as "bytecode".It is a subsystem of the JDK and JRE.

        -Compiler (javac): The compiler is a tool that is used to compile Java source code into bytecode.

        -Archiver (jar): The archiver is a tool that is used to package Java class files into a single file, called a JAR (Java Archive) file.

        -Documentation generator (javadoc): The documentation generator is a tool that is used to generate API documentation from Java source code.


What is an IDE?
Answer: An IDE, or Integrated Development Environment, is a software application that allows developers to write, debug, and test code for multiple programming languages. Some of the key features of an IDE include:
  - Code editor: A text editor that can assist in writing software code with features such as syntax highlighting, language-specific auto-completion, and checking for bugs as code is being written.
  - Compiler: A tool that translates source code into machine code.
  -Debugger: A tool that helps to identify and fix errors in code.

  - Syntax checker: A tool that checks code for syntax errors.

  -Code generator: A tool that generates code automatically.

What are some of the most popular Java IDEs available in the market?
Answer:
IntelliJ IDEA
Eclipse
NetBeans
BlueJ
JDeveloper
Visual Studio

Explain the entire java life cycle.
Answer: The Java life cycle refers to the process that a Java program goes through from the time it is written to the time it is executed. The life cycle of a Java program includes the following stages:
1-Writing the code: The first stage of the Java life cycle is writing the code. This involves using a text editor or an integrated development environment (IDE) to write the Java code.
2-Compiling the code: Once the code is written, it needs to be compiled into bytecode. The Java compiler converts the source code into bytecode, which is a platform-independent format that can
be executed on any machine that has a Java Virtual Machine (JVM) installed.
3-Loading the class: The JVM loads the bytecode into memory and creates an instance of the class.
4-Verifying the bytecode: The JVM verifies the bytecode to ensure that it is valid and does not violate any security constraints.
5-Executing the code: The JVM executes the bytecode, which results in the execution of the Java program.
6-Garbage collection: During the execution of the Java program, the JVM automatically manages the memory by performing garbage collection. This involves freeing up memory that is no longer being used by the program.
7-Termination: The final stage of the Java life cycle is termination. This occurs when the program has finished executing or when it is terminated by the user.

What is a class?
Answer:A class is an essential concept in object-oriented programming that defines a blueprint for creating objects.In Java, a class is a group of variables of different data types and a group of methods.A class
declaration can include components such as modifiers, the class keyword, class name, superclass, interfaces, and body

What is an object?
Answer:An object is an instance of a particular class or subclass with the class's own methods or procedures and data variables. It stores its state in fields and exposes its behavior through methods.

What is the entry point of a Java project?
Answer: In Java, the entry point of a project is the main method of the starting class.
 The main method is a special method that serves as the starting point for the execution of a Java program.It must be declared as public static void main(String[] args)
 The args parameter is an array of String objects that contains any command-line arguments passed to the program
When the Java Virtual Machine (JVM) is told to run a Java application by specifying its class, it looks for the main method of that class
 The main method is typically located in the class that contains the main method, but it can also be located in a different class.

Why is the main() method static?
Answer: The main() method in is always declared as static so that the JVM can call it without creating an instance of the class containing the main.

Which class is the superclass of all classes?
Answer: The superclass of all classes is the Object class, which is present in the java.lang package.
Every class in Java is either directly or indirectly derived from the Object class.The Object class provides a set of methods that are inherited by all other classes in Java,
 such as equals(), hashCode(), toString(), and getClass() .

What is difference between path and classpath variables?
Answer: In Java, PATH and CLASSPATH are two environment variables that are used to locate and load files.
The main difference between PATH and CLASSPATH is that PATH is used by the operating system to locate executable files,
such as java and javac, while CLASSPATH is used by the Java Virtual Machine (JVM) or the Java compiler to locate and load compiled Java bytecodes stored in the ".class" file.


What is the difference between an Interface and Abstract class?
Answer: An abstract class is a class that cannot be instantiated and can have both abstract and non-abstract methods.
 Abstract methods are methods without a body that must be implemented by the concrete subclass.
 Abstract classes can also have instance variables and concrete methods with implementation.
 An abstract class can be extended by only one class, and it can implement multiple interfaces.
On the other hand, an interface is a collection of abstract methods that must be implemented by the concrete class that implements the interface.
An interface cannot have instance variables or concrete methods with implementation.
A class can implement multiple interfaces, but it can extend only one class, whether it is an abstract class or a concrete class.


Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: we cannot create an object of an abstract class or an interface directly since they are incomplete classes.
 However,we can create a reference variable of an abstract class or an interface. The reference variable is used to refer to the objects of derived classes (subclasses of abstract class) .
 To create an object of a class that implements an interface or extends an abstract class, we can use the new keyword to create an instance of the derived class
  and assign it to a reference variable of the abstract class or interface type



What is Access Modifier?
Answer: Access modifiers in Java are used to set the accessibility or visibility of classes, interfaces, variables, methods, constructors, and data members.
They are used to control the scope or accessibility of these element.In Java, there are four types of access modifiers: public, protected, default (also known as package-private), and private.

-public: A public element can be accessed from anywhere in the program. There is no restriction on its accessibility.
-protected: A protected element can be accessed within the same package or by a subclass in a different package.
-default or package-private: An element with no access modifier specified is considered to have default access. It can be accessed only within the same package.
-private: A private element can be accessed only within the same class.



What is OOP? Define each OOP concept.
Answer: Object-Oriented Programming (OOP) is a programming paradigm that focuses on the use of objects to represent and manipulate data.
 OOP provides several key concepts that enable developers to write modular, reusable, and maintainable code.

  In Java, the four primary OOP concepts are:
 *Abstraction: Abstraction is the process of hiding implementation details while showing only the necessary information to the user. In Java, abstraction is achieved through abstract classes and interfaces.
 *Encapsulation: Encapsulation is the process of binding data and methods that operate on that data into a single unit. In Java, encapsulation is achieved through the use of access modifiers such as public, private, and protected.
 *Inheritance: Inheritance is the process of creating a new class from an existing class. The new class, called the subclass, inherits all the properties and methods of the existing class, called the superclass. In Java, inheritance is achieved using the "extends" keyword.
 *Polymorphism: Polymorphism is the ability of an object to take on many forms. In Java, polymorphism is achieved through method overloading and method overriding.

What is Java Package and which package is imported by default?
Answer: In Java, a package is a namespace that groups related classes and interfaces. It is similar to a folder in a file directory and is used to
avoid naming conflicts and to write better maintainable code.Java packages can be divided into two categories: built-in packages and user-defined packages.

 In Java, two packages are imported by default in all classes: java.lang package and a no-name package (also called default package).
 The java.lang package provides fundamental classes that are necessary to design a basic Java program, such as Object and Class
 The no-name package is present by default and is named the default package
  The Java Virtual Machine imports these packages by default in Java internally, which is why we are able to access all the classes of these packages without explicitly importing them.


What is an API? List some API's that you have used so far.
Answer: An API is a communication interface that allows two separate software components to share data
APIs are essential tools for enterprises of all sizes because they allow one computer program's capabilities to be utilized by another
 There are different types of APIs, including open APIs, partner APIs, composite APIs, and web service APIs.

 some API that I have used:
  Pay with PayPal
  Google Maps
  Google Search
Rapid Translate Multi Traduction.


Does java support multiple inheritance? Why or why not?
Answer:No, Java does not support multiple inheritance in classes. This means that a class cannot extend more than one class.
The reason behind this is to prevent ambiguity that can arise when a class inherits from multiple classes that have the same method or field.


What is method overloading? List all of the different ways to overload.
Answer: Method overloading is a feature in Java that allows a class to have multiple methods with the same name but different parameters.
 By having the same name of the methods, the readability of the program increases
      There are different ways to overload a method in Java, which are:
      -By changing the number of parameters: A method can be overloaded by changing the number of parameters

      -By changing the data type of parameters: Method overloading can also be achieved by changing the data type of parameters

     - By changing the order of parameters: Method overloading can also be achieved by changing the order of parameters


Explain exceptions in java and how to handle them.
Answer: An exception is an event that disrupts the normal flow of a program and indicates that something bad has happened in the application.
 Exception handling is a mechanism in Java to handle runtime errors such as ClassNotFoundException, IOException, SQLException, and RemoteException, among others.
To handle exceptions in Java, the try-catch block is used. The code that may throw an exception is enclosed in the try block, and any exceptions that are thrown are caught by one or more catch blocks.


What is static keyword? When and how do we use it?
Answer: The static keyword in Java is a non-access modifier that can be used with variables, methods, blocks, and nested classes. It is mainly used for memory management.
and also a static method cannot access non-static variables or methods directly
The static keyword is used to share the same variable or method of a given class. It is used for a constant variable or a method that is the same for every instance of a clas.
*some common use cases for the static keyword:
-static variables: When a variable is declared as static, it is known as a class variable or a static member. A single copy of the variable is created and shared among all instances of the class. This can be useful for creating constants or for storing data that is shared across all instances of a class

-static methods: When a method is declared as static, it is known as a class method or a static method. A static method can be called without creating an instance of the class.
This can be useful for utility methods that don't depend on the state of any particular instance of a class

-static blocks: A static block is a block of code that is executed when a class is loaded into memory.
This can be useful for initializing static variables or for performing other one-time setup tasks.

-static nested classes: A static nested class is a class that is defined inside another class and marked as static.
 This means that it can be instantiated without creating an instance of the outer class. This can be useful for grouping related functionality together.


What is final keyword? When and how do we use it?
Answer: The final keyword is a non-access modifier in Java that can be used with classes, attributes, and methods to make them non-changeable, meaning they cannot be inherited
or overridden.
The final keyword is called a "modifier" and is used in different contexts. It is a useful tool for improving code quality and ensuring that certain aspects of a program
cannot be modified or extended. By declaring variables, methods, and classes as final, developers can write more secure, robust, and maintainable code.


Explain the difference between final, finally and finalize?
Answer: 'final' final is a keyword used in Java to restrict the modification of a variable, method, or class
   A final class cannot be inherited, a final method cannot be overridden, and a final variable cannot be reassigned.

'finally' finally is a block used in Java to ensure that a section of code is always executed, even if an exception is thrown. It is used in association with a try/catch block and guarantees that a section of code will be executed, even if an exception is thrown

'finalize' is a method in Java used to perform cleanup processing on an object before it is garbage collected.
It is used just before an object is destroyed and can be called just prior to object creation.
It is a method of the Object class.

"final is used to restrict modification, finally is used to ensure a section of code is always executed, and finalize is used to perform cleanup processing
 on an object before it is garbage collected."



What is a constructor?
Answer: A constructor is a special method in object-oriented programming that is used to initialize objects of a class.
It is called automatically when an object of a class is created and is responsible for setting initial values for the object's attributes.

In Java, a constructor is a block of code similar to a method that is called when an instance of a class is created.
It constructs the values at the time of object creation, and it is not necessary to write a constructor for a class because the Java compiler
creates a default constructor if the class doesn't have any.
There are two types of constructors in Java: no-arg constructors and parameterized constructors.


Can we have multiple constructors in a class?
Answer: Yes, a class can have multiple constructors .This is known as constructor overloading in java.
Constructor overloading allows a class to have multiple constructors with different parameter lists. Each constructor can initialize
 the object's fields in a different way, depending on the parameters passed to it.

If we don't have a constructor declared, what is called during the object creation?
Answer: In Java, if a class does not explicitly declare any constructors, the Java compiler automatically provides a no-argument constructor called the default constructor.

What is "this" keyword in Java? When would we use it?
Answer: In Java, this is a keyword that refers to the current object inside a method or a constructor
It is used to differentiate between class attributes and parameters with the same name, as a class attribute can be shadowed by a method or constructor parameter.


What is "super" keyword in Java? What are some scenarios we would use it?
Answer: In Java, the super keyword is used to refer to the objects of the immediate parent class. It is a reference variable that is used to refer to the immediate parent class object.


What does JVM stand for?
Answer: JVM stands for Java Virtual Machine.

Is JVM platform independent?
Answer: the JVM is not platform-independent,However, Java is platform-independent because the bytecode produced by the javac compiler can be run on a variety of operating systems
The bytecode produced by the javac compiler is platform-independent and requires only the JVM to run

What version of Java are you using?
Answer: I'm using java version "17.0.7" .

What does JAR stand for?
Answer: JAR stands for Java ARchive.

What is the difference between JDK and JVM?
Answer: JDK is a software development kit used for developing Java applications and applets,and JVM is an environment for executing bytecode.


What is the difference between JVM and JRE?
Answer:JVM is contained or inbuilt in both JDK and JRE and is platform-independent.


Explain the difference between compile-time and run-time?
Answer: In programming Compile-time is the period when the source code is translated into machine code or executable code by a compiler or interpreter.
 Run-time is the period when the executable code is running and the program is being executed.

What is heap?
Answer:A heap is a specialized tree-based data structure that is essentially an almost complete binary tree that satisfies
the heap property.

How does Java manage its memory?
Answer:Java memory management divides into two major parts: JVM Memory Structure and Working of Garbage Collector
VM defines various run time data areas in a heap, which are used during the program execution. The memory areas are
destroyed when JVM exits, whereas the data areas are destroyed when the thread exits.Java objects reside in an area
called the heap, which is created when the JVM starts up and may increase or decrease in
size while the application runs. When the heap becomes full, garbage is collected. During the garbage collection,
objects that are no longer used are cleared, thus making space for new objects.


What is the difference between String, StringBuffer and StringBuilder?
Answer: In Java, String, StringBuffer, and StringBuilder are classes used to represent a sequence of characters.
The main difference between them is that String is immutable, while StringBuffer and StringBuilder are mutable.

What is Singleton class?
Answer: A Singleton class is a design pattern that ensures that a class can only have one object or instance at a time.
This pattern is useful when exactly one object is needed to coordinate actions across a system, or when there is a need
to restrict the limit of the number of object creations to only one.


What is Serialization and Deserialization?
Answer: Serialization and deserialization are two important concepts in programming that allow objects to be easily stored
transmitted, and reconstructed. Serialization is the process of converting an object’s state to a byte stream, which can
then be saved to a file, sent over a network, or stored in a database. The byte stream represents the object’s state
which can later be reconstructed to create a new copy of the object.


Explain the difference between While and Do..While loops?
Answer: The main difference between the two is when the condition is checked. In a while loop, the condition is checked
at the beginning of the loop, and if the condition is true, then only statements in that loop will be executed.
In contrast, in a do-while loop, the condition is checked at the end of the loop. Therefore, the do-while loop guarantees
one execution of the loop logic, whereas the while loop does not.


What is Enum?
Answer: An enum, short for enumeration, is a special data type that allows a variable to be a set of predefined constants
The variable must be equal to one of the values that have been predefined for it. In Java, we define an enum type by
using the enum keyword. An enum declaration defines a class (called an enum type) that can include methods and other fields

What is Iterator?
Answer: An iterator is an object that allows a programmer to traverse a container, particularly lists
It is an interface that provides a way to access the elements of a collection object sequentially without exposing its
underlying representation.


Which one will take more memory: an int or Integer? Why?
Answer: The Integer class allows conversion to float, double, long and short, while the int doesn't.
The Integer consumes slightly more memory than the 32-bit Java int. The Integer class has five static properties while
the int can't have any.


Why are Strings considered to be immutable in Java?
Answer: In Java, Strings are immutable, which means that once a String object is created, its contents cannot be changed.
Instead, any operation that appears to modify a String actually creates a new String object with the modified content

What is constructor chaining in Java?
Answer: Constructor chaining in Java is the process of calling one constructor from another constructor with respect to
the current object. It is used to avoid duplicate code while having multiple constructors and make the code more readable.


The difference between Serial and Parallel Garbage Collector?
Answer: Both garbage collectors are generational garbage collectors, meaning they divide the set of all objects into
generations and collect all the objects in one or more generations in a single pass.The main difference between them is
that the parallel garbage collector uses multiple threads for garbage collection,
while the serial garbage collector uses only oneThe choice of garbage collector depends on the application requirements,
 such as the size of the heap, the number of threads, and the pause time requirements.


What does JIT stands for?
Answer: JIT stands for Just-in-Time, which is an inventory management method in which goods are received from suppliers
only as they are needed.

Explain the process of Java garbage collection?
Answer: Garbage collection is the process of reclaiming the runtime unused memory by destroying the unused objects.
In Java, garbage collection is an automatic process that frees up memory space and makes coding Java apps easier for
developers.Java objects are created on the heap, which is a section of memory dedicated to a program. When objects are
no longer needed, the garbage collector finds and tracks these unused objects and deletes them to free up memory.

Can you guarantee the garbage collection process?
Answer: Garbage collection does not guarantee that a program will not run out of memory.Garbage collection is an automatic
 process that helps to free unused memory by identifying and discarding objects that are no longer needed.


What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: